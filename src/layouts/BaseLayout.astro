---
import NavBar from '../components/Layout/NavBar.astro'
import '../styles/global.css'

export interface Props {
  title: string
}

const { title } = Astro.props
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/meta/apple-touch-icon.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="/meta/favicon-32x32.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="/meta/favicon-16x16.png"
    />
    <link rel="manifest" href="/meta/site.webmanifest" />
    <link rel="shortcut icon" href="/meta/favicon.ico" />
    <meta name="msapplication-TileColor" content="#2b5797" />
    <meta name="msapplication-config" content="/meta/browserconfig.xml" />
    <meta name="theme-color" content="#2f2f2f" />
    <meta name="generator" content={Astro.generator} />
    <title>{`${title} | Tauri.app`}</title>
    <script>
      function initTabs(tabList: HTMLElement){
        let tabs: HTMLElement[] = Array.from(tabList.querySelectorAll("[role=tab]"));
        let selectTab = (selected: HTMLElement) => {
          for (let tab of tabs) {
            let panel = document.getElementById(tab.getAttribute("aria-controls")!)!;
            if (tab === selected) {
              tab.setAttribute('aria-selected', 'true');
              tab.removeAttribute('tabindex');
              panel.removeAttribute('hidden')
            } else {
              tab.setAttribute('aria-selected', 'false');
              tab.tabIndex = -1;
              panel.hidden = true;
            }
          }
        };

        
        let onKeydown = (event: KeyboardEvent) => {
          let tab = event.currentTarget as HTMLElement;
          let index = Number(tab.dataset.index);
          let next_index: number | undefined = undefined;
      
          switch (event.key) {
            case 'ArrowLeft':
              next_index = index - 1 < 0 ? tabs.length - 1 : index - 1;
              break;
            case 'ArrowRight':
              next_index = index + 1 > tabs.length - 1 ? 0 : index + 1;
              break;
            case 'Home':
              next_index = 0;
              break;
            case 'End':
              next_index = tabs.length - 1;
              break;
            default:
              break;
          }
      
          if (next_index !== undefined) {
            tabs[next_index].focus();
            event.stopPropagation();
            event.preventDefault();
          }
        }
    

        let firstTab: HTMLElement | undefined = undefined;
        for (let index in tabs) {
          let tab = tabs[index];
          if (!firstTab) {
            firstTab = tab;
          }

          tab.tabIndex = -1;
          tab.setAttribute('aria-selected', 'false');
          tab.setAttribute("data-index", index);

          // TODO: implement roving tabindex that handles keyboard focus change properly
          tab.addEventListener('keydown', onKeydown);
          tab.addEventListener('click', (event: MouseEvent) => {
            selectTab(event.currentTarget as HTMLElement);
          });
        }

        selectTab(firstTab!);
      }

      for (let tabList of document.querySelectorAll('[role=tablist][data-docs-tablist]')) {
        initTabs(tabList as HTMLElement);
      }
    </script>
    <style is:global>
      .tab-container {
        width: max-content;
      }
      [role=tab] {
        border-bottom: 3px solid transparent;
        border-radius: 0.4rem;
        cursor: pointer;
        display: inline-flex;
        padding: 1rem;
      }

      [role=tab][aria-selected=true] {
        border-bottom-color: #67d6ed;
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
        color: #67d6ed;
      }

      .spacer {
        margin-top: 1rem;
      }
    </style>
  </head>
  <body>
    <NavBar />
    <slot />
  </body>
</html>
